// Code generated by wunderctl. DO NOT EDIT.

import type function_ParkingMutationsFinishParking from "../../.wundergraph/operations/parking/mutations/FinishParking";
import type function_ParkingMutationsStartParking from "../../.wundergraph/operations/parking/mutations/StartParking";
import type function_UsersGet from "../../.wundergraph/operations/users/get";
import type function_UsersSubscribe from "../../.wundergraph/operations/users/subscribe";
import type function_UsersUpdate from "../../.wundergraph/operations/users/update";
import type { ExtractInput, ExtractResponse } from "@wundergraph/sdk/operations";
import type { OperationErrors } from "./ts-operation-errors";

export interface pgdb_parking_ratesWhereInput {
	AND?: pgdb_parking_ratesWhereInput;
	OR?: pgdb_parking_ratesWhereInput[];
	NOT?: pgdb_parking_ratesWhereInput;
	id?: pgdb_IntFilter;
	created_at?: pgdb_DateTimeNullableFilter;
	vehicle_id?: pgdb_BigIntNullableFilter;
	min_hours?: pgdb_IntNullableFilter;
	min_amount?: pgdb_IntNullableFilter;
	variable_amount?: pgdb_IntNullableFilter;
	is_active?: pgdb_BoolFilter;
	vehicle_types?: pgdb_Vehicle_typesRelationFilter;
	parking_transactions?: pgdb_Parking_transactionsListRelationFilter;
}

export interface pgdb_IntFilter {
	equals?: number;
	in?: number[];
	notIn?: number[];
	lt?: number;
	lte?: number;
	gt?: number;
	gte?: number;
	not?: pgdb_NestedIntFilter;
}

export interface pgdb_NestedIntFilter {
	equals?: number;
	in?: number[];
	notIn?: number[];
	lt?: number;
	lte?: number;
	gt?: number;
	gte?: number;
	not?: pgdb_NestedIntFilter;
}

export interface pgdb_DateTimeNullableFilter {
	equals?: string;
	in?: string[];
	notIn?: string[];
	lt?: string;
	lte?: string;
	gt?: string;
	gte?: string;
	not?: pgdb_NestedDateTimeNullableFilter;
}

export interface pgdb_NestedDateTimeNullableFilter {
	equals?: string;
	in?: string[];
	notIn?: string[];
	lt?: string;
	lte?: string;
	gt?: string;
	gte?: string;
	not?: pgdb_NestedDateTimeNullableFilter;
}

export interface pgdb_BigIntNullableFilter {
	equals?: string;
	in?: string[];
	notIn?: string[];
	lt?: string;
	lte?: string;
	gt?: string;
	gte?: string;
	not?: pgdb_NestedBigIntNullableFilter;
}

export interface pgdb_NestedBigIntNullableFilter {
	equals?: string;
	in?: string[];
	notIn?: string[];
	lt?: string;
	lte?: string;
	gt?: string;
	gte?: string;
	not?: pgdb_NestedBigIntNullableFilter;
}

export interface pgdb_IntNullableFilter {
	equals?: number;
	in?: number[];
	notIn?: number[];
	lt?: number;
	lte?: number;
	gt?: number;
	gte?: number;
	not?: pgdb_NestedIntNullableFilter;
}

export interface pgdb_NestedIntNullableFilter {
	equals?: number;
	in?: number[];
	notIn?: number[];
	lt?: number;
	lte?: number;
	gt?: number;
	gte?: number;
	not?: pgdb_NestedIntNullableFilter;
}

export interface pgdb_BoolFilter {
	equals?: boolean;
	not?: pgdb_NestedBoolFilter;
}

export interface pgdb_NestedBoolFilter {
	equals?: boolean;
	not?: pgdb_NestedBoolFilter;
}

export interface pgdb_Vehicle_typesRelationFilter {
	is?: pgdb_vehicle_typesWhereInput;
	isNot?: pgdb_vehicle_typesWhereInput;
}

export interface pgdb_vehicle_typesWhereInput {
	AND?: pgdb_vehicle_typesWhereInput;
	OR?: pgdb_vehicle_typesWhereInput[];
	NOT?: pgdb_vehicle_typesWhereInput;
	id?: pgdb_BigIntFilter;
	created_at?: pgdb_DateTimeNullableFilter;
	code?: pgdb_StringNullableFilter;
	description?: pgdb_StringNullableFilter;
	parking_rates?: pgdb_Parking_ratesListRelationFilter;
}

export interface pgdb_BigIntFilter {
	equals?: string;
	in?: string[];
	notIn?: string[];
	lt?: string;
	lte?: string;
	gt?: string;
	gte?: string;
	not?: pgdb_NestedBigIntFilter;
}

export interface pgdb_NestedBigIntFilter {
	equals?: string;
	in?: string[];
	notIn?: string[];
	lt?: string;
	lte?: string;
	gt?: string;
	gte?: string;
	not?: pgdb_NestedBigIntFilter;
}

export interface pgdb_StringNullableFilter {
	equals?: string;
	in?: string[];
	notIn?: string[];
	lt?: string;
	lte?: string;
	gt?: string;
	gte?: string;
	contains?: string;
	startsWith?: string;
	endsWith?: string;
	mode?: "default" | "insensitive";
	not?: pgdb_NestedStringNullableFilter;
}

export interface pgdb_NestedStringNullableFilter {
	equals?: string;
	in?: string[];
	notIn?: string[];
	lt?: string;
	lte?: string;
	gt?: string;
	gte?: string;
	contains?: string;
	startsWith?: string;
	endsWith?: string;
	not?: pgdb_NestedStringNullableFilter;
}

export interface pgdb_Parking_ratesListRelationFilter {
	every?: pgdb_parking_ratesWhereInput;
	some?: pgdb_parking_ratesWhereInput;
	none?: pgdb_parking_ratesWhereInput;
}

export interface pgdb_Parking_transactionsListRelationFilter {
	every?: pgdb_parking_transactionsWhereInput;
	some?: pgdb_parking_transactionsWhereInput;
	none?: pgdb_parking_transactionsWhereInput;
}

export interface pgdb_parking_transactionsWhereInput {
	AND?: pgdb_parking_transactionsWhereInput;
	OR?: pgdb_parking_transactionsWhereInput[];
	NOT?: pgdb_parking_transactionsWhereInput;
	id?: pgdb_BigIntFilter;
	created_at?: pgdb_DateTimeFilter;
	vehicle_plate?: pgdb_StringFilter;
	datetime_in?: pgdb_DateTimeFilter;
	datetime_out?: pgdb_DateTimeNullableFilter;
	amount?: pgdb_IntNullableFilter;
	parking_rate?: pgdb_IntFilter;
	parking_rates?: pgdb_Parking_ratesRelationFilter;
}

export interface pgdb_DateTimeFilter {
	equals?: string;
	in?: string[];
	notIn?: string[];
	lt?: string;
	lte?: string;
	gt?: string;
	gte?: string;
	not?: pgdb_NestedDateTimeFilter;
}

export interface pgdb_NestedDateTimeFilter {
	equals?: string;
	in?: string[];
	notIn?: string[];
	lt?: string;
	lte?: string;
	gt?: string;
	gte?: string;
	not?: pgdb_NestedDateTimeFilter;
}

export interface pgdb_StringFilter {
	equals?: string;
	in?: string[];
	notIn?: string[];
	lt?: string;
	lte?: string;
	gt?: string;
	gte?: string;
	contains?: string;
	startsWith?: string;
	endsWith?: string;
	mode?: "default" | "insensitive";
	not?: pgdb_NestedStringFilter;
}

export interface pgdb_NestedStringFilter {
	equals?: string;
	in?: string[];
	notIn?: string[];
	lt?: string;
	lte?: string;
	gt?: string;
	gte?: string;
	contains?: string;
	startsWith?: string;
	endsWith?: string;
	not?: pgdb_NestedStringFilter;
}

export interface pgdb_Parking_ratesRelationFilter {
	is?: pgdb_parking_ratesWhereInput;
	isNot?: pgdb_parking_ratesWhereInput;
}

export type JSONValue = string | number | boolean | JSONObject | Array<JSONValue>;

export type JSONObject = { [key: string]: JSONValue };
import type { GraphQLError } from "@wundergraph/sdk/client";

export interface ParkingQueriesParkingRatesAndRelationsInput {
	where: pgdb_parking_ratesWhereInput;
}

export interface ParkingQueriesParkingTransactionsAndRelationsInput {
	where: pgdb_parking_transactionsWhereInput;
}

export interface ParkingQueriesVehicleTypesInput {
	where?: pgdb_vehicle_typesWhereInput;
}

export type ParkingMutationsFinishParkingInput = ExtractInput<typeof function_ParkingMutationsFinishParking>;

export type ParkingMutationsStartParkingInput = ExtractInput<typeof function_ParkingMutationsStartParking>;

export type UsersGetInput = ExtractInput<typeof function_UsersGet>;

export type UsersSubscribeInput = ExtractInput<typeof function_UsersSubscribe>;

export type UsersUpdateInput = ExtractInput<typeof function_UsersUpdate>;

export interface InternalParkingQueriesParkingRatesAndRelationsInput {
	where: pgdb_parking_ratesWhereInput;
}

export interface InternalParkingQueriesParkingTransactionsAndRelationsInput {
	where: pgdb_parking_transactionsWhereInput;
}

export interface InternalParkingQueriesVehicleTypesInput {
	where?: pgdb_vehicle_typesWhereInput;
}

export interface InternalParkingMutationsFinishParkingInput {
	parkingTransactionId: string;
}

export interface InternalParkingMutationsStartParkingInput {
	vehicleCode: string;
}

export interface InternalUsersGetInput {
	id: string;
}

export interface InternalUsersSubscribeInput {
	id: string;
}

export interface InternalUsersUpdateInput {
	id: string;
	name: string;
	bio: string;
}

export interface InjectedParkingQueriesParkingRatesAndRelationsInput {
	where: pgdb_parking_ratesWhereInput;
}

export interface InjectedParkingQueriesParkingTransactionsAndRelationsInput {
	where: pgdb_parking_transactionsWhereInput;
}

export interface InjectedParkingQueriesVehicleTypesInput {
	where?: pgdb_vehicle_typesWhereInput;
}

export interface ParkingQueriesParkingRatesAndRelationsResponse {
	data?: ParkingQueriesParkingRatesAndRelationsResponseData;
	errors?: GraphQLError[];
}

export interface ParkingQueriesParkingTransactionsAndRelationsResponse {
	data?: ParkingQueriesParkingTransactionsAndRelationsResponseData;
	errors?: GraphQLError[];
}

export interface ParkingQueriesVehicleTypesResponse {
	data?: ParkingQueriesVehicleTypesResponseData;
	errors?: GraphQLError[];
}

export interface ParkingMutationsFinishParkingResponse {
	data?: ParkingMutationsFinishParkingResponseData;
	errors?: GraphQLError[];
}

export interface ParkingMutationsStartParkingResponse {
	data?: ParkingMutationsStartParkingResponseData;
	errors?: GraphQLError[];
}

export interface UsersGetResponse {
	data?: UsersGetResponseData;
	errors?: GraphQLError[];
}

export interface UsersSubscribeResponse {
	data?: UsersSubscribeResponseData;
	errors?: GraphQLError[];
}

export interface UsersUpdateResponse {
	data?: UsersUpdateResponseData;
	errors?: GraphQLError[];
}

export interface ParkingQueriesParkingRatesAndRelationsResponseData {
	pgdb_findManyparking_rates: {
		id: number;
		created_at?: string;
		min_hours?: number;
		min_amount?: number;
		variable_amount?: number;
		is_active: boolean;
		vehicle_types?: {
			id: string;
			code?: string;
			description?: string;
		};
	}[];
}

export interface ParkingQueriesParkingTransactionsAndRelationsResponseData {
	pgdb_findManyparking_transactions: {
		id: string;
		created_at: string;
		vehicle_plate: string;
		datetime_in: string;
		datetime_out?: string;
		amount?: number;
		parking_rates: {
			min_hours?: number;
			min_amount?: number;
			variable_amount?: number;
		};
	}[];
}

export interface ParkingQueriesVehicleTypesResponseData {
	pgdb_findManyvehicle_types: {
		id: string;
		code?: string;
		description?: string;
	}[];
}

export type ParkingMutationsFinishParkingResponseData = ExtractResponse<typeof function_ParkingMutationsFinishParking>;

export type ParkingMutationsStartParkingResponseData = ExtractResponse<typeof function_ParkingMutationsStartParking>;

export type UsersGetResponseData = ExtractResponse<typeof function_UsersGet>;

export type UsersSubscribeResponseData = ExtractResponse<typeof function_UsersSubscribe>;

export type UsersUpdateResponseData = ExtractResponse<typeof function_UsersUpdate>;
